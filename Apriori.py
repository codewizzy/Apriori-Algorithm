# -*- coding: utf-8 -*-
"""IIT2018085.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12A-VeSrkGbsd8hl5aDVePbMy_iK11HZy
"""

import csv
import itertools

# feeding dataset using the store_data.csv
file = open("store_data.csv")
reader = csv.reader(file)

itemList=[]
for items in reader:
    itemList.append(items)

# 1% of given dataset is assumed as minimum support value i.e. (7501/100)*1 = 75
minimumSupportCount = 75

#confidence is assumed to be 40%
confidence = 40

#function to get all subsets of sets of length number
def combinarotics(listOfValues,number):
    temp = itertools.combinations(listOfValues, number)
    subset=[]
    for x in temp:
        subset.append(list(x))
    return subset

#function to get support values of itemset
def determineSupport(listOfValues):
    count = 0
    for items in itemList:
        if (set(listOfValues)<=set(items)):
           count+=1
    return count

#function to get frequentItemSet of size 1
def CandidateC1(listOfValues):
    frequencyOfItem={}
    for values in listOfValues:
        for items in values:
            if items in frequencyOfItem:
                frequencyOfItem[items]+=1
            else:
                frequencyOfItem[items]=1
    listOfValues = []
    for item, value in frequencyOfItem.items():
        temp = []
        if frequencyOfItem[item] >= minimumSupportCount:
            temp.append(item)
            listOfValues.append(temp)
    return listOfValues

# function to build all possible frequent item set of size k using frequent item set of size k-1
def frequentItemset(L,k):
    itemSet=[]
    for i in L:
        for j in L:
            if i!=j:
                lst = list(set(i)|set(j))
                if(len(lst)==k):
                    itemSet.append(lst)
    frequencyOfItemSet = {}
    for iter1 in itemSet:
        frequency = 0
        for iter2 in itemList:
            if set((iter1)) <= set(iter2):
                frequency += 1
            frequencyOfItemSet[tuple(iter1)] = frequency
    frequientItemset = []
    for key, value in frequencyOfItemSet.items():
        if value >= minimumSupportCount:
            frequientItemset.append(list(key))
    return frequientItemset

#Apriori Algorithm

# step1 determine freuentset of size 1
frequentItemSet = CandidateC1(itemList)

# step 2 generate frequentset  of maximum possible size
k = 2
while(True):
    temp = frequentItemset(frequentItemSet, k)
    if( len(temp)==0):
        break
    frequentItemSet=temp
    k+=1

#all possible frequentItemset
#uncomment the below line to print all possible frequent itemset
#print(frequentItemSet)

#step3 : mining association rules from frequentItemsets
cnt=1;
print("Strong association rules for given dataset with considering Minimum Support Value as 1% dataset and confidence as 40 % are listed below\n")
for i in frequentItemSet:
    temp = i
    for k in range(1,len(temp)):
        subset = combinarotics(temp, k)
        for u in subset:
            v = list(set(temp)-set(u))
            # using formula Confidence(A->B)=Support_count(AâˆªB)/Support_count(A) to determine strong association rules
            confidenceUV = (determineSupport(u) / determineSupport(v)) * 100
            if confidenceUV>=confidence:
                print(cnt," ",u,"=>",v)
                cnt+=1